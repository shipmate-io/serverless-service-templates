api: v1
name: Laravel
description: PHP service using the Laravel framework

form:

  - name: Source code
    questions:

      - name: Path to Laravel source code
        description: >
          The absolute path to the directory in the Git repository that contains the source code of the service.
          For example: "/services/billing".
        type: file_path
        variable: path_to_source_code
        required: false
        default: /

      - name: Paths to shared libraries
        description: >
          If the service uses one or more shared libraries that are stored in the Git repository outside of its source 
          directory, you should specify the absolute paths to these libraries here. 
          For example: "/libraries/validation-helpers".
        type: file_paths
        variable: paths_to_shared_libraries
        required: false

      - name: PHP version
        description: The PHP version in which the source code of the service is written.
        type: select
        variable: php_version
        required: true
        options:
          - name: "8.0"
            value: "8.0"

      - name: Private composer registries
        description: >
          The private Composer registries that host the private Composer dependencies of the service, if any.
        type: structs
        variable: private_composer_registries
        questions:
          - name: URL
            description: The URL of the private registry.
            type: string
            variable: url
            required: true
          - name: Username
            description: The username that should be used to authenticate with the private registry.
            type: string
            variable: username
            required: true
          - name: Password
            description: The password that should be used to authenticate with the private registry.
            type: password
            variable: password
            required: true

  - name: Frontend assets
    questions:

      - name: Build assets
        description: Build the JavaScript and CSS assets of the service during the deployment process.
        type: boolean
        variable: build_assets

      - name: Node version
        description: The Node.js version used to build the assets.
        type: select
        variable: node_version
        required: true
        options:
          - name: 16
            value: 16
          - name: 17
            value: 17
        default: 16
        if: "{{ variables.build_assets }}"

      - name: Package manager
        description: The package manager used to install the JavaScript dependencies of the service.
        type: select
        variable: package_manager
        required: true
        options:
          - name: NPM
            value: npm
          - name: Yarn
            value: yarn
        default: npm
        if: "{{ variables.build_assets }}"

      - name: Build assets script
        description: >
          The script to build the JavaScript and CSS assets of the service and store the result in Laravel's /public
          directory.
        type: code
        variable: build_assets_script
        required: true
        default:
          switch:
            - case: "{{ variables.package_manager == 'npm' }}"
              value: npm run production
            - case: "{{ variables.package_manager == 'yarn' }}"
              value: yarn run production
        if: "{{ variables.build_assets }}"

  - name: Deployment
    questions:

      - name: Deploy script
        description: >
          The script to run every time a new instance of the service is deployed. The script should only perform tasks 
          of which the impact is limited to the scope of a single service.
        type: code
        variable: deploy_script
        default: |
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

      - name: Release script
        description: >
          The script to run once every time a new version of the service is released. The script should only perform 
          tasks that impact all instances of the service.
        type: code
        variable: release_script
        default: |
          sleep 60s
          php artisan migrate --force

  - name: Runtime
    questions:

      - name: Timezone
        variable: timezone
        type: timezone
        required: true
        default: UTC

      - name: Maximum file upload size
        description: The maximum allowed size in megabytes (MB) of files uploaded to the service.
        type: integer
        variable: maximum_file_upload_size
        required: true
        default: 2

      - name: Additional software
        description: >
          The installation script for the additional Linux packages or utilities the service needs, if any. Within the 
          script, you can use any default Linux Debian utility, including the apt package manager. Multi-line commands
          and comments are not allowed in the script.
        type: code
        variable: additional_software_script

  - name: Web workload
    questions:

      - name: Workload size
        type: workload_size
        variable: web_workload_size
        required: true

  - name: CLI workload
    questions:

      - name: Workload size
        type: workload_size
        variable: cli_workload_size
        required: true

  - name: Background processing
    questions:

      - name: Laravel scheduler
        description: Enable the Laravel scheduler to run periodic tasks.
        type: boolean
        variable: scheduler

      - name: Queue workers
        type: structs
        variable: workers
        questions:

          - name: Name
            description: >
              A name in snake_case notation that helps you distinguish between multiple queue workers.
            type: string
            variable: name
            required: true

          - name: Job retries
            description: >
              The number of times the execution of the job should be retried after the previous execution failed.
            type: integer
            variable: retries
            required: true
            default: 0

          - name: Workload size
            type: workload_size
            variable: workload_size
            required: true

images:
  
  - name: laravel
    alias: Laravel
    dockerfile: Dockerfile
    files:
      - "{{ path('code-repository', variables.path_to_source_code, '**') }}"
      - path: "{{ path('code-repository', loop.value, '**') }}"
        loop: "{{ variables.paths_to_shared_libraries }}"
      - nginx/cli.conf
      - nginx/web.conf
      - nginx/mode.sh
      - php/cli.php
      - php/init.sh
      - php/run.sh
    arguments:
      - name: PRIVATE_COMPOSER_REGISTRY_URL_{{ loop.key }}
        value: "{{ loop.value.url }}"
        loop: "{{ variables.private_composer_registries }}"
      - name: PRIVATE_COMPOSER_REGISTRY_USERNAME_{{ loop.key }}
        value: "{{ loop.value.username }}"
        loop: "{{ variables.private_composer_registries }}"
      - name: PRIVATE_COMPOSER_REGISTRY_PASSWORD_{{ loop.key }}
        value: "{{ loop.value.password }}"
        loop: "{{ variables.private_composer_registries }}"

workloads:

  - name: web
    alias: Web
    instances:
      minimum: "{{ variables.web_workload_size.minimum_instances }}"
      maximum: "{{ variables.web_workload_size.maximum_instances }}"
    concurrency: "{{ variables.web_workload_size.concurrency }}"
    timeout: "{{ variables.web_workload_size.timeout }}"
    image: laravel
    environment:
      - map: "{{ environment }}"
      - name: CONTAINER_MODE
        value: web
      - name: CLOUD_RUN_PROJECT_HASH
        value: "{{ google.project_hash }}"
      - name: TIMEZONE
        value: "{{ variables.timezone }}"
      - name: CONCURRENCY
        value: "{{ variables.web_workload_size.concurrency }}"
      - name: MAX_FILE_UPLOAD
        value: "{{ variables.maximum_file_upload_size }}"
    entrypoints:
      web: {}
    memory: "{{ variables.web_workload_size.memory }}"
    cpus: "{{ variables.web_workload_size.cpus }}"

  - name: cli
    alias: CLI
    instances:
      minimum: "{{ variables.cli_workload_size.minimum_instances }}"
      maximum: "{{ variables.cli_workload_size.maximum_instances }}"
    concurrency: "{{ variables.cli_workload_size.concurrency }}"
    timeout: "{{ variables.cli_workload_size.timeout }}"
    image: laravel
    environment:
      - map: "{{ environment }}"
      - name: CONTAINER_MODE
        value: cli
      - name: CLOUD_RUN_PROJECT_HASH
        value: "{{ google.project_hash }}"
      - name: TIMEZONE
        value: "{{ variables.timezone }}"
      - name: CONCURRENCY
        value: "{{ variables.cli_workload_size.concurrency }}"
      - name: MAX_FILE_UPLOAD
        value: "{{ variables.maximum_file_upload_size }}"
    entrypoints:
      cli: {}
    memory: "{{ variables.cli_workload_size.memory }}"
    cpus: "{{ variables.cli_workload_size.cpus }}"

  - name: "worker_{{ loop.value.name }}"
    alias: "{{ loop.value.name }} queue worker"
    instances:
      minimum: "{{ loop.value.workload_size.minimum_instances }}"
      maximum: "{{ loop.value.workload_size.maximum_instances }}"
    concurrency: "{{ loop.value.workload_size.concurrency }}"
    timeout: "{{ loop.value.workload_size.timeout }}"
    image: laravel
    environment:
      - map: "{{ environment }}"
      - name: CONTAINER_MODE
        value: web
      - name: CLOUD_RUN_PROJECT_HASH
        value: "{{ google.project_hash }}"
      - name: TIMEZONE
        value: "{{ variables.timezone }}"
      - name: CONCURRENCY
        value: "{{ loop.value.workload_size.concurrency }}"
      - name: MAX_FILE_UPLOAD
        value: "{{ variables.maximum_file_upload_size }}"
    entrypoints:
      web: {}
    memory: "{{ loop.value.workload_size.memory }}"
    cpus: "{{ loop.value.workload_size.cpus }}"
    loop: "{{ variables.workers }}"

job_queues:

  - name: "{{ loop.value.name }}"
    timeout: "{{ loop.value.workload_size.timeout }}"
    retries: "{{ loop.value.retries }}"
    target:
      workload: "worker_{{ loop.value.name }}"
      path: /handle-job
    loop: "{{ variables.workers }}"

cron_jobs:

  - name: scheduler
    alias: Scheduler
    schedule: "* * * * *"
    timezone: "{{ variables.timezone }}"
    target:
      workload: cli
      command: "php artisan schedule:run"
    if: "{{ variables.scheduler }}"

jobs:

  - name: init
    alias: Initialization
    target:
      workload: cli
      command: "sh /scripts/init.sh"
    if: "{{ variables.release_script }}"