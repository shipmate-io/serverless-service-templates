api: v1
name: Node.js
description: JavaScript service using the Node.js runtime

form:

  - name: Source code
    questions:

      - name: Path to source code
        description: >
          The absolute path to the directory in the Git repository that contains the source code of the service.
          For example: "/services/web-client".
        type: file_path
        variable: path_to_source_code
        default: /

      - name: Paths to shared libraries
        description: >
          If the service uses one or more shared libraries that are stored in the Git repository outside of its source 
          directory, you should specify the absolute paths to these libraries here. 
          For example: "/libraries/ui-components".
        type: file_paths
        variable: paths_to_shared_libraries
        required: false
        
  - name: Building configuration
    questions:

      - name: Node version
        description: The Node.js version used to build the source code.
        type: select
        variable: node_version
        required: true
        options:
          - name: 16
            value: 16
        default: 16

      - name: Package manager
        description: The package manager used to install the Node.js dependencies of the service.
        type: select
        variable: package_manager
        required: true
        options:
          - name: NPM
            value: npm
          - name: Yarn
            value: yarn
        default: npm

      - name: Private NPM registries
        description: >
          The private NPM registries that host the private NPM packages of the service, if any.
        type: structs
        variable: private_npm_registries
        questions:
          - name: URL
            description: The URL of the private registry.
            type: string
            variable: url
            required: true
          - name: Scope
            description: "The scope of the packages stored in the private registry. For example: @fortawesome"
            type: string
            variable: scope
            required: true
          - name: Authentication token
            description: The authentication token that should be used to authenticate with the private registry.
            type: password
            variable: auth_token
            required: true

      - name: Build script
        description: The script to build the service.
        type: code
        variable: build_script
        required: true
        default:
          switch:
            - case: "{{ variables.package_manager == 'npm' }}"
              value: npm run build
            - case: "{{ variables.package_manager == 'yarn' }}"
              value: yarn run build

      - name: Path to server
        description: >
          The path to the Node.js server file. For example: "/services/web-client/server.js".
        type: file_path
        variable: path_to_server
        required: true
        default: /server.js

  - name: Runtime
    questions:

      - name: Timezone
        type: timezone
        variable: timezone
        required: true
        default: UTC

      - name: Additional software
        description: >
          The installation script for the additional Linux packages or utilities the service needs, if any. Within the 
          script, you can use any default Linux Debian utility, including the apt package manager. Multi-line commands
          and comments are not allowed in the script.
        type: code
        variable: additional_software_script

  - name: Web service
    questions:

      - name: Workload size
        type: workload_size
        variable: web_workload_size
        required: true

images:

  - name: nodejs
    alias: Node.js
    dockerfile: Dockerfile
    files:
      - "{{ path('code-repository', variables.path_to_source_code, '**') }}"
      - path: "{{ path('code-repository', loop.value, '**') }}"
        loop: "{{ variables.paths_to_shared_libraries }}"
      - .npmrc
    arguments:
      - map: "{{ environment }}"

workloads:

  - name: web
    alias: Web
    instances:
      minimum: "{{ variables.web_workload_size.minimum_instances }}"
      maximum: "{{ variables.web_workload_size.maximum_instances }}"
    concurrency: "{{ variables.web_workload_size.concurrency }}"
    timeout: "{{ variables.web_workload_size.timeout }}"
    image: nodejs
    environment:
      - map: "{{ environment }}"
      - name: CLOUD_RUN_PROJECT_HASH
        value: "{{ google.project_hash }}"
      - name: TIMEZONE
        value: "{{ variables.timezone }}"
    entrypoints:
      web: {}
    memory: "{{ variables.web_workload_size.memory }}"
    cpus: "{{ variables.web_workload_size.cpus }}"